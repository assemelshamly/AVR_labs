
TIMER0_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000719  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000439  00000000  00000000  00002282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_10>
  2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  74:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  7c:	1a ba       	out	0x1a, r1	; 26
	DDRB=DIO_U8_PORTB_DIR;
  7e:	17 ba       	out	0x17, r1	; 23
	DDRC=DIO_U8_PORTC_DIR;
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	84 bb       	out	0x14, r24	; 20
	DDRD=DIO_U8_PORTD_DIR;
  84:	11 ba       	out	0x11, r1	; 17
  86:	08 95       	ret

00000088 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  88:	88 30       	cpi	r24, 0x08	; 8
  8a:	00 f5       	brcc	.+64     	; 0xcc <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  8c:	66 23       	and	r22, r22
  8e:	81 f0       	breq	.+32     	; 0xb0 <DIO_voidSetPinValue+0x28>
  90:	61 30       	cpi	r22, 0x01	; 1
  92:	09 f0       	breq	.+2      	; 0x96 <DIO_voidSetPinValue+0xe>
  94:	81 c0       	rjmp	.+258    	; 0x198 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  96:	4b b3       	in	r20, 0x1b	; 27
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	b9 01       	movw	r22, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_voidSetPinValue+0x1c>
  a0:	66 0f       	add	r22, r22
  a2:	77 1f       	adc	r23, r23
  a4:	8a 95       	dec	r24
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_voidSetPinValue+0x18>
  a8:	cb 01       	movw	r24, r22
  aa:	84 2b       	or	r24, r20
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
  b0:	4b b3       	in	r20, 0x1b	; 27
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	b9 01       	movw	r22, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_voidSetPinValue+0x36>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_voidSetPinValue+0x32>
  c2:	cb 01       	movw	r24, r22
  c4:	80 95       	com	r24
  c6:	84 23       	and	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
  cc:	80 31       	cpi	r24, 0x10	; 16
  ce:	08 f5       	brcc	.+66     	; 0x112 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
  d0:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
  d2:	66 23       	and	r22, r22
  d4:	81 f0       	breq	.+32     	; 0xf6 <DIO_voidSetPinValue+0x6e>
  d6:	61 30       	cpi	r22, 0x01	; 1
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_voidSetPinValue+0x54>
  da:	5e c0       	rjmp	.+188    	; 0x198 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_voidSetPinValue+0x62>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_voidSetPinValue+0x5e>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinValue+0x7c>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinValue+0x78>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 112:	88 31       	cpi	r24, 0x18	; 24
 114:	00 f5       	brcc	.+64     	; 0x156 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 116:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 118:	66 23       	and	r22, r22
 11a:	79 f0       	breq	.+30     	; 0x13a <DIO_voidSetPinValue+0xb2>
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	e1 f5       	brne	.+120    	; 0x198 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_voidSetPinValue+0xa6>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_voidSetPinValue+0xa2>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinValue+0xc0>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinValue+0xbc>
 14c:	cb 01       	movw	r24, r22
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 156:	80 32       	cpi	r24, 0x20	; 32
 158:	f8 f4       	brcc	.+62     	; 0x198 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 15a:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 15c:	66 23       	and	r22, r22
 15e:	79 f0       	breq	.+30     	; 0x17e <DIO_voidSetPinValue+0xf6>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	d1 f4       	brne	.+52     	; 0x198 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinValue+0xea>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinValue+0xe6>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinValue+0x104>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinValue+0x100>
 190:	cb 01       	movw	r24, r22
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	82 bb       	out	0x12, r24	; 18
 198:	08 95       	ret

0000019a <GIE_voidEnable>:
#include "GIE_private.h"
#include "GIE_config.h"

void GIE_voidEnable(void)
{
	SET_BIT(SREG , 7);
 19a:	8f b7       	in	r24, 0x3f	; 63
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	8f bf       	out	0x3f, r24	; 63
 1a0:	08 95       	ret

000001a2 <ISR_LED_TOGGLE>:
}
void ISR_LED_TOGGLE(void)
{
	static u8 Local_u8State=0;
	static u16 Local_u8Counter=0;
	Local_u8Counter++;
 1a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Local_u8Counter.1617>
 1a6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Local_u8Counter.1617+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <Local_u8Counter.1617+0x1>
 1b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Local_u8Counter.1617>
	if(Local_u8Counter ==1000 )
 1b4:	88 3e       	cpi	r24, 0xE8	; 232
 1b6:	93 40       	sbci	r25, 0x03	; 3
 1b8:	79 f4       	brne	.+30     	; 0x1d8 <ISR_LED_TOGGLE+0x36>
	{
		DIO_voidSetPinValue(DIO_U8_PIN23,Local_u8State);
 1ba:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	87 e1       	ldi	r24, 0x17	; 23
 1c0:	0e 94 44 00 	call	0x88	; 0x88 <DIO_voidSetPinValue>
		TOGGLE_BIT(Local_u8State,0);
 1c4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	89 27       	eor	r24, r25
 1cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Local_u8Counter=0;
 1d0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Local_u8Counter.1617+0x1>
 1d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Local_u8Counter.1617>
 1d8:	08 95       	ret

000001da <main>:
	TIMER0_void_Init();
	TIMER0_void_SetOVCallBack(func);
	TIMER0_void_SetTimerReg(PRELOAD);
	TIMER0_void_EnableOVInt();
	GIE_voidEnable();*/
    DIO_voidInit();
 1da:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>
    TIMER0_void_Init();
 1de:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TIMER0_void_Init>
	TIMER0_void_SetCTCCallBack(&ISR_LED_TOGGLE);
 1e2:	81 ed       	ldi	r24, 0xD1	; 209
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 27 01 	call	0x24e	; 0x24e <TIMER0_void_SetCTCCallBack>
	TIMER0_void_SetCompareVal(250);
 1ea:	8a ef       	ldi	r24, 0xFA	; 250
 1ec:	0e 94 21 01 	call	0x242	; 0x242 <TIMER0_void_SetCompareVal>
	TIMER0_void_EnableCTCInt();
 1f0:	0e 94 23 01 	call	0x246	; 0x246 <TIMER0_void_EnableCTCInt>
    GIE_voidEnable();
 1f4:	0e 94 cd 00 	call	0x19a	; 0x19a <GIE_voidEnable>
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <main+0x1e>

000001fa <TIMER0_void_Init>:
	CLEAR_BIT(TIMSK , 1);
}

void TIMER0_void_SetOVCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_OV_CallBack = Copy_ptr ;
 1fa:	83 b7       	in	r24, 0x33	; 51
 1fc:	8f 7b       	andi	r24, 0xBF	; 191
 1fe:	83 bf       	out	0x33, r24	; 51
 200:	83 b7       	in	r24, 0x33	; 51
 202:	88 60       	ori	r24, 0x08	; 8
 204:	83 bf       	out	0x33, r24	; 51
 206:	83 b7       	in	r24, 0x33	; 51
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	83 bf       	out	0x33, r24	; 51
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	83 bf       	out	0x33, r24	; 51
 212:	83 b7       	in	r24, 0x33	; 51
 214:	8b 7f       	andi	r24, 0xFB	; 251
 216:	83 bf       	out	0x33, r24	; 51
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	8f 7e       	andi	r24, 0xEF	; 239
 21c:	83 bf       	out	0x33, r24	; 51
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	83 bf       	out	0x33, r24	; 51
 224:	89 b7       	in	r24, 0x39	; 57
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	89 bf       	out	0x39, r24	; 57
 22a:	89 b7       	in	r24, 0x39	; 57
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	89 bf       	out	0x39, r24	; 57
 230:	88 b7       	in	r24, 0x38	; 56
 232:	81 60       	ori	r24, 0x01	; 1
 234:	88 bf       	out	0x38, r24	; 56
 236:	88 b7       	in	r24, 0x38	; 56
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	88 bf       	out	0x38, r24	; 56
 23c:	12 be       	out	0x32, r1	; 50
 23e:	1c be       	out	0x3c, r1	; 60
 240:	08 95       	ret

00000242 <TIMER0_void_SetCompareVal>:
 242:	8c bf       	out	0x3c, r24	; 60
 244:	08 95       	ret

00000246 <TIMER0_void_EnableCTCInt>:
 246:	89 b7       	in	r24, 0x39	; 57
 248:	82 60       	ori	r24, 0x02	; 2
 24a:	89 bf       	out	0x39, r24	; 57
 24c:	08 95       	ret

0000024e <TIMER0_void_SetCTCCallBack>:
}

void TIMER0_void_SetCTCCallBack(void (*Copy_ptr) (void) ) 
{
	TIMER0_CTC_CallBack = Copy_ptr ;
 24e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <TIMER0_CTC_CallBack+0x1>
 252:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TIMER0_CTC_CallBack>
 256:	08 95       	ret

00000258 <__vector_11>:
	
}

void __vector_11(void) __attribute__((signal , used)); // for avr gcc
void __vector_11(void)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	
	TIMER0_OV_CallBack();
 27a:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_OV_CallBack>
 27e:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_OV_CallBack+0x1>
 282:	09 95       	icall
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	TIMER0_CTC_CallBack();
 2c8:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_CTC_CallBack>
 2cc:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_CTC_CallBack+0x1>
 2d0:	09 95       	icall
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
