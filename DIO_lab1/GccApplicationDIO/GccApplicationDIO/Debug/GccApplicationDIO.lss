
GccApplicationDIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000608  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e2  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c2  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  64:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	87 bb       	out	0x17, r24	; 23
	DDRC=DIO_U8_PORTC_DIR;
  74:	14 ba       	out	0x14, r1	; 20
	DDRD=DIO_U8_PORTD_DIR;
  76:	11 ba       	out	0x11, r1	; 17
  78:	08 95       	ret

0000007a <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  7a:	88 30       	cpi	r24, 0x08	; 8
  7c:	00 f5       	brcc	.+64     	; 0xbe <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  7e:	66 23       	and	r22, r22
  80:	81 f0       	breq	.+32     	; 0xa2 <DIO_voidSetPinValue+0x28>
  82:	61 30       	cpi	r22, 0x01	; 1
  84:	09 f0       	breq	.+2      	; 0x88 <DIO_voidSetPinValue+0xe>
  86:	81 c0       	rjmp	.+258    	; 0x18a <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  88:	4b b3       	in	r20, 0x1b	; 27
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	b9 01       	movw	r22, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <DIO_voidSetPinValue+0x1c>
  92:	66 0f       	add	r22, r22
  94:	77 1f       	adc	r23, r23
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <DIO_voidSetPinValue+0x18>
  9a:	cb 01       	movw	r24, r22
  9c:	84 2b       	or	r24, r20
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_voidSetPinValue+0x36>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_voidSetPinValue+0x32>
  b4:	cb 01       	movw	r24, r22
  b6:	80 95       	com	r24
  b8:	84 23       	and	r24, r20
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
  be:	80 31       	cpi	r24, 0x10	; 16
  c0:	08 f5       	brcc	.+66     	; 0x104 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin -( DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
  c2:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
  c4:	66 23       	and	r22, r22
  c6:	81 f0       	breq	.+32     	; 0xe8 <DIO_voidSetPinValue+0x6e>
  c8:	61 30       	cpi	r22, 0x01	; 1
  ca:	09 f0       	breq	.+2      	; 0xce <DIO_voidSetPinValue+0x54>
  cc:	5e c0       	rjmp	.+188    	; 0x18a <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
  ce:	48 b3       	in	r20, 0x18	; 24
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	b9 01       	movw	r22, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_voidSetPinValue+0x62>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_voidSetPinValue+0x5e>
  e0:	cb 01       	movw	r24, r22
  e2:	84 2b       	or	r24, r20
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
  e8:	48 b3       	in	r20, 0x18	; 24
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	b9 01       	movw	r22, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetPinValue+0x7c>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	8a 95       	dec	r24
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetPinValue+0x78>
  fa:	cb 01       	movw	r24, r22
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	88 bb       	out	0x18, r24	; 24
 102:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 104:	88 31       	cpi	r24, 0x18	; 24
 106:	00 f5       	brcc	.+64     	; 0x148 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 108:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 10a:	66 23       	and	r22, r22
 10c:	79 f0       	breq	.+30     	; 0x12c <DIO_voidSetPinValue+0xb2>
 10e:	61 30       	cpi	r22, 0x01	; 1
 110:	e1 f5       	brne	.+120    	; 0x18a <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 112:	45 b3       	in	r20, 0x15	; 21
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinValue+0xa6>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	8a 95       	dec	r24
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinValue+0xa2>
 124:	cb 01       	movw	r24, r22
 126:	84 2b       	or	r24, r20
 128:	85 bb       	out	0x15, r24	; 21
 12a:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 12c:	45 b3       	in	r20, 0x15	; 21
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_voidSetPinValue+0xc0>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_voidSetPinValue+0xbc>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 148:	80 32       	cpi	r24, 0x20	; 32
 14a:	f8 f4       	brcc	.+62     	; 0x18a <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 14c:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 14e:	66 23       	and	r22, r22
 150:	79 f0       	breq	.+30     	; 0x170 <DIO_voidSetPinValue+0xf6>
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	d1 f4       	brne	.+52     	; 0x18a <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 156:	42 b3       	in	r20, 0x12	; 18
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinValue+0xea>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinValue+0xe6>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 170:	42 b3       	in	r20, 0x12	; 18
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_voidSetPinValue+0x104>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_voidSetPinValue+0x100>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret

0000018c <DIO_u8GetPinValue>:
	}
}
u8 DIO_u8GetPinValue(u8 Copy_u8Pin)
{
	u8 Local_u8Value = DIO_U8_HIGH;
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	58 f4       	brcc	.+22     	; 0x1a6 <DIO_u8GetPinValue+0x1a>
	{
		Local_u8Value = GET_BIT(PINA,Copy_u8Pin);
 190:	29 b3       	in	r18, 0x19	; 25
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	a9 01       	movw	r20, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_u8GetPinValue+0x10>
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_u8GetPinValue+0xc>
 1a0:	ca 01       	movw	r24, r20
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	08 95       	ret
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
 1a6:	80 31       	cpi	r24, 0x10	; 16
 1a8:	60 f4       	brcc	.+24     	; 0x1c2 <DIO_u8GetPinValue+0x36>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
 1aa:	28 ef       	ldi	r18, 0xF8	; 248
 1ac:	28 0f       	add	r18, r24
        Local_u8Value = GET_BIT(PINB,Copy_u8Pin); 
 1ae:	96 b3       	in	r25, 0x16	; 22
 1b0:	89 2f       	mov	r24, r25
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_u8GetPinValue+0x2e>
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_u8GetPinValue+0x2a>
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	08 95       	ret
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 1c2:	88 31       	cpi	r24, 0x18	; 24
 1c4:	60 f4       	brcc	.+24     	; 0x1de <DIO_u8GetPinValue+0x52>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 1c6:	20 ef       	ldi	r18, 0xF0	; 240
 1c8:	28 0f       	add	r18, r24
		Local_u8Value = GET_BIT(PINC,Copy_u8Pin);  			
 1ca:	93 b3       	in	r25, 0x13	; 19
 1cc:	89 2f       	mov	r24, r25
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_u8GetPinValue+0x4a>
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	2a 95       	dec	r18
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_u8GetPinValue+0x46>
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	08 95       	ret
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	60 f4       	brcc	.+24     	; 0x1fa <DIO_u8GetPinValue+0x6e>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 1e2:	28 ee       	ldi	r18, 0xE8	; 232
 1e4:	28 0f       	add	r18, r24
        Local_u8Value = GET_BIT(PIND,Copy_u8Pin);			
 1e6:	90 b3       	in	r25, 0x10	; 16
 1e8:	89 2f       	mov	r24, r25
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8GetPinValue+0x66>
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8GetPinValue+0x62>
 1f6:	81 70       	andi	r24, 0x01	; 1
 1f8:	08 95       	ret
		// error
	}
}
u8 DIO_u8GetPinValue(u8 Copy_u8Pin)
{
	u8 Local_u8Value = DIO_U8_HIGH;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	{
		// error
	}
	
	return Local_u8Value;
}
 1fc:	08 95       	ret

000001fe <main>:
#include <util/delay.h>
 
int main(void)
{
	
	DIO_voidInit();
 1fe:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	/* activate internal pull up resistor */
	DIO_voidSetPinValue(DIO_U8_PIN24 , DIO_U8_HIGH);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_U8_PIN26 , DIO_U8_HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	8a e1       	ldi	r24, 0x1A	; 26
 20e:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_voidSetPinValue>
	u8 counter = 0;
	PORTA = counter;
 212:	1b ba       	out	0x1b, r1	; 27
	
	DIO_voidInit();
	/* activate internal pull up resistor */
	DIO_voidSetPinValue(DIO_U8_PIN24 , DIO_U8_HIGH);
	DIO_voidSetPinValue(DIO_U8_PIN26 , DIO_U8_HIGH);
	u8 counter = 0;
 214:	c0 e0       	ldi	r28, 0x00	; 0
	PORTA = counter;
	
	while(1)
	{
		  
            if(DIO_u8GetPinValue(DIO_U8_PIN24) == 1 && counter < 9)
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8GetPinValue>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	49 f4       	brne	.+18     	; 0x232 <main+0x34>
 220:	c9 30       	cpi	r28, 0x09	; 9
 222:	38 f4       	brcc	.+14     	; 0x232 <main+0x34>
			{
				counter++;
 224:	cf 5f       	subi	r28, 0xFF	; 255
				PORTA = counter;
 226:	cb bb       	out	0x1b, r28	; 27
				while(DIO_u8GetPinValue(DIO_U8_PIN24) == 1);
 228:	88 e1       	ldi	r24, 0x18	; 24
 22a:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8GetPinValue>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	d9 f3       	breq	.-10     	; 0x228 <main+0x2a>
			}
			if(DIO_u8GetPinValue(DIO_U8_PIN26) == 1 && counter > 0)
 232:	8a e1       	ldi	r24, 0x1A	; 26
 234:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8GetPinValue>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	69 f7       	brne	.-38     	; 0x216 <main+0x18>
 23c:	cc 23       	and	r28, r28
 23e:	59 f3       	breq	.-42     	; 0x216 <main+0x18>
			{
				counter--;
 240:	c1 50       	subi	r28, 0x01	; 1
				PORTA = counter;
 242:	cb bb       	out	0x1b, r28	; 27
				while(DIO_u8GetPinValue(DIO_U8_PIN26) == 1);
 244:	8a e1       	ldi	r24, 0x1A	; 26
 246:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8GetPinValue>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	d9 f3       	breq	.-10     	; 0x244 <main+0x46>
 24e:	e3 cf       	rjmp	.-58     	; 0x216 <main+0x18>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
