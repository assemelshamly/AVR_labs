
LDR_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cd  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cc  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043c  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000019ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ee  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036f  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000021c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  64:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidEnable>:
	SET_BIT(ADCSRA , 7);
}

void ADC_voidDisable(void)
{
	CLEAR_BIT(ADCSRA , 7);
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	86 b9       	out	0x06, r24	; 6
  72:	08 95       	ret

00000074 <ADC_voidInit>:
  74:	87 b1       	in	r24, 0x07	; 7
  76:	80 64       	ori	r24, 0x40	; 64
  78:	87 b9       	out	0x07, r24	; 7
  7a:	87 b1       	in	r24, 0x07	; 7
  7c:	8f 77       	andi	r24, 0x7F	; 127
  7e:	87 b9       	out	0x07, r24	; 7
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 7d       	andi	r24, 0xDF	; 223
  84:	87 b9       	out	0x07, r24	; 7
  86:	86 b1       	in	r24, 0x06	; 6
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	86 b9       	out	0x06, r24	; 6
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	86 b9       	out	0x06, r24	; 6
  92:	86 b1       	in	r24, 0x06	; 6
  94:	84 60       	ori	r24, 0x04	; 4
  96:	86 b9       	out	0x06, r24	; 6
  98:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidEnable>
  9c:	08 95       	ret

0000009e <ADC_u16Convert>:
{
	u8 Local_u8High = 0;
	u8 Local_u8LOW = 0;
	u16 result = 0;
	
	ADMUX = ADMUX & 0b11100000; // mask
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	90 7e       	andi	r25, 0xE0	; 224
  a2:	97 b9       	out	0x07, r25	; 7
	ADMUX =  ADMUX | Local_u8Channel;
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	89 2b       	or	r24, r25
  a8:	87 b9       	out	0x07, r24	; 7
	ADCL = 0;
  aa:	14 b8       	out	0x04, r1	; 4
	ADCH = 0;
  ac:	15 b8       	out	0x05, r1	; 5
	// start conversion
	SET_BIT(ADCSRA , 6);
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	86 b9       	out	0x06, r24	; 6
	// wait for ADC to finish conversion
	while(GET_BIT(ADCSRA , 6) == 1);
  b4:	36 99       	sbic	0x06, 6	; 6
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <ADC_u16Convert+0x16>
	
	Local_u8LOW = ADCL;
  b8:	24 b1       	in	r18, 0x04	; 4
    Local_u8High = ADCH;
  ba:	85 b1       	in	r24, 0x05	; 5

	result = ( (Local_u8High & 0b00000011) << 8) | Local_u8LOW;
  bc:	83 70       	andi	r24, 0x03	; 3
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	98 2f       	mov	r25, r24
  c2:	88 27       	eor	r24, r24
	return result;
}
  c4:	82 2b       	or	r24, r18
  c6:	08 95       	ret

000000c8 <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRB=DIO_U8_PORTB_DIR;
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	87 bb       	out	0x17, r24	; 23
	DDRC=DIO_U8_PORTC_DIR;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	84 bb       	out	0x14, r24	; 20
	DDRD=DIO_U8_PORTD_DIR;
  d4:	11 ba       	out	0x11, r1	; 17
  d6:	08 95       	ret

000000d8 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	00 f5       	brcc	.+64     	; 0x11c <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  dc:	66 23       	and	r22, r22
  de:	81 f0       	breq	.+32     	; 0x100 <DIO_voidSetPinValue+0x28>
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_voidSetPinValue+0xe>
  e4:	81 c0       	rjmp	.+258    	; 0x1e8 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  e6:	4b b3       	in	r20, 0x1b	; 27
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinValue+0x1c>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	8a 95       	dec	r24
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinValue+0x18>
  f8:	cb 01       	movw	r24, r22
  fa:	84 2b       	or	r24, r20
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
 100:	4b b3       	in	r20, 0x1b	; 27
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_voidSetPinValue+0x36>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_voidSetPinValue+0x32>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	08 f5       	brcc	.+66     	; 0x162 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
 120:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
 122:	66 23       	and	r22, r22
 124:	81 f0       	breq	.+32     	; 0x146 <DIO_voidSetPinValue+0x6e>
 126:	61 30       	cpi	r22, 0x01	; 1
 128:	09 f0       	breq	.+2      	; 0x12c <DIO_voidSetPinValue+0x54>
 12a:	5e c0       	rjmp	.+188    	; 0x1e8 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
 12c:	48 b3       	in	r20, 0x18	; 24
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_voidSetPinValue+0x62>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_voidSetPinValue+0x5e>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	88 bb       	out	0x18, r24	; 24
 144:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
 146:	48 b3       	in	r20, 0x18	; 24
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	b9 01       	movw	r22, r18
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinValue+0x7c>
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinValue+0x78>
 158:	cb 01       	movw	r24, r22
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	88 bb       	out	0x18, r24	; 24
 160:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 162:	88 31       	cpi	r24, 0x18	; 24
 164:	00 f5       	brcc	.+64     	; 0x1a6 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 166:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 168:	66 23       	and	r22, r22
 16a:	79 f0       	breq	.+30     	; 0x18a <DIO_voidSetPinValue+0xb2>
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	e1 f5       	brne	.+120    	; 0x1e8 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 170:	45 b3       	in	r20, 0x15	; 21
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_voidSetPinValue+0xa6>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_voidSetPinValue+0xa2>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	85 bb       	out	0x15, r24	; 21
 188:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 18a:	45 b3       	in	r20, 0x15	; 21
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinValue+0xc0>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinValue+0xbc>
 19c:	cb 01       	movw	r24, r22
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	85 bb       	out	0x15, r24	; 21
 1a4:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 1a6:	80 32       	cpi	r24, 0x20	; 32
 1a8:	f8 f4       	brcc	.+62     	; 0x1e8 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 1aa:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 1ac:	66 23       	and	r22, r22
 1ae:	79 f0       	breq	.+30     	; 0x1ce <DIO_voidSetPinValue+0xf6>
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	d1 f4       	brne	.+52     	; 0x1e8 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 1b4:	42 b3       	in	r20, 0x12	; 18
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_voidSetPinValue+0xea>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_voidSetPinValue+0xe6>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	82 bb       	out	0x12, r24	; 18
 1cc:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 1ce:	42 b3       	in	r20, 0x12	; 18
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x104>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x100>
 1e0:	cb 01       	movw	r24, r22
 1e2:	80 95       	com	r24
 1e4:	84 23       	and	r24, r20
 1e6:	82 bb       	out	0x12, r24	; 18
 1e8:	08 95       	ret

000001ea <main>:
#include <avr/io.h>


int main(void)
{
    DIO_voidInit();
 1ea:	0e 94 64 00 	call	0xc8	; 0xc8 <DIO_voidInit>
	ADC_voidInit();
 1ee:	0e 94 3a 00 	call	0x74	; 0x74 <ADC_voidInit>
	u16 Local_u8Digital = 0;
	//s8 buffer1[20];
    while (1) 
    {

		Local_u8Digital = ADC_u16Convert(ADC_u8_Channel2);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_u16Convert>
		Local_u8Analog = ((f32)(Local_u8Digital) * 5.0) / 1024.0;
 1fa:	bc 01       	movw	r22, r24
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 25 01 	call	0x24a	; 0x24a <__floatunsisf>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	40 ea       	ldi	r20, 0xA0	; 160
 20a:	50 e4       	ldi	r21, 0x40	; 64
 20c:	0e 94 86 01 	call	0x30c	; 0x30c <__mulsf3>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e8       	ldi	r20, 0x80	; 128
 216:	5a e3       	ldi	r21, 0x3A	; 58
 218:	0e 94 86 01 	call	0x30c	; 0x30c <__mulsf3>
		//itoa ( Local_u8Digital, buffer1, 10);
		//dtostrf(float_value, min_width, num_digits_after_decimal, where_to_store_string)
		//dtostrf(Local_u8Analog, 20, 15, buffer1);
		if (Local_u8Analog < 0.1)
 21c:	2d ec       	ldi	r18, 0xCD	; 205
 21e:	3c ec       	ldi	r19, 0xCC	; 204
 220:	4c ec       	ldi	r20, 0xCC	; 204
 222:	5d e3       	ldi	r21, 0x3D	; 61
 224:	0e 94 20 01 	call	0x240	; 0x240 <__cmpsf2>
 228:	88 23       	and	r24, r24
 22a:	2c f4       	brge	.+10     	; 0x236 <main+0x4c>
		{
			DIO_voidSetPinValue(DIO_U8_PIN23,DIO_U8_HIGH);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	87 e1       	ldi	r24, 0x17	; 23
 230:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinValue>
 234:	de cf       	rjmp	.-68     	; 0x1f2 <main+0x8>
		}
		else
		{
			DIO_voidSetPinValue(DIO_U8_PIN23,DIO_U8_LOW);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	87 e1       	ldi	r24, 0x17	; 23
 23a:	0e 94 6c 00 	call	0xd8	; 0xd8 <DIO_voidSetPinValue>
 23e:	d9 cf       	rjmp	.-78     	; 0x1f2 <main+0x8>

00000240 <__cmpsf2>:
 240:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__fp_cmp>
 244:	08 f4       	brcc	.+2      	; 0x248 <__cmpsf2+0x8>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret

0000024a <__floatunsisf>:
 24a:	e8 94       	clt
 24c:	09 c0       	rjmp	.+18     	; 0x260 <__floatsisf+0x12>

0000024e <__floatsisf>:
 24e:	97 fb       	bst	r25, 7
 250:	3e f4       	brtc	.+14     	; 0x260 <__floatsisf+0x12>
 252:	90 95       	com	r25
 254:	80 95       	com	r24
 256:	70 95       	com	r23
 258:	61 95       	neg	r22
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	8f 4f       	sbci	r24, 0xFF	; 255
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	99 23       	and	r25, r25
 262:	a9 f0       	breq	.+42     	; 0x28e <__floatsisf+0x40>
 264:	f9 2f       	mov	r31, r25
 266:	96 e9       	ldi	r25, 0x96	; 150
 268:	bb 27       	eor	r27, r27
 26a:	93 95       	inc	r25
 26c:	f6 95       	lsr	r31
 26e:	87 95       	ror	r24
 270:	77 95       	ror	r23
 272:	67 95       	ror	r22
 274:	b7 95       	ror	r27
 276:	f1 11       	cpse	r31, r1
 278:	f8 cf       	rjmp	.-16     	; 0x26a <__floatsisf+0x1c>
 27a:	fa f4       	brpl	.+62     	; 0x2ba <__floatsisf+0x6c>
 27c:	bb 0f       	add	r27, r27
 27e:	11 f4       	brne	.+4      	; 0x284 <__floatsisf+0x36>
 280:	60 ff       	sbrs	r22, 0
 282:	1b c0       	rjmp	.+54     	; 0x2ba <__floatsisf+0x6c>
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	8f 4f       	sbci	r24, 0xFF	; 255
 28a:	9f 4f       	sbci	r25, 0xFF	; 255
 28c:	16 c0       	rjmp	.+44     	; 0x2ba <__floatsisf+0x6c>
 28e:	88 23       	and	r24, r24
 290:	11 f0       	breq	.+4      	; 0x296 <__floatsisf+0x48>
 292:	96 e9       	ldi	r25, 0x96	; 150
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <__floatsisf+0x6a>
 296:	77 23       	and	r23, r23
 298:	21 f0       	breq	.+8      	; 0x2a2 <__floatsisf+0x54>
 29a:	9e e8       	ldi	r25, 0x8E	; 142
 29c:	87 2f       	mov	r24, r23
 29e:	76 2f       	mov	r23, r22
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <__floatsisf+0x5e>
 2a2:	66 23       	and	r22, r22
 2a4:	71 f0       	breq	.+28     	; 0x2c2 <__floatsisf+0x74>
 2a6:	96 e8       	ldi	r25, 0x86	; 134
 2a8:	86 2f       	mov	r24, r22
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	2a f0       	brmi	.+10     	; 0x2ba <__floatsisf+0x6c>
 2b0:	9a 95       	dec	r25
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	da f7       	brpl	.-10     	; 0x2b0 <__floatsisf+0x62>
 2ba:	88 0f       	add	r24, r24
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	97 f9       	bld	r25, 7
 2c2:	08 95       	ret

000002c4 <__fp_cmp>:
 2c4:	99 0f       	add	r25, r25
 2c6:	00 08       	sbc	r0, r0
 2c8:	55 0f       	add	r21, r21
 2ca:	aa 0b       	sbc	r26, r26
 2cc:	e0 e8       	ldi	r30, 0x80	; 128
 2ce:	fe ef       	ldi	r31, 0xFE	; 254
 2d0:	16 16       	cp	r1, r22
 2d2:	17 06       	cpc	r1, r23
 2d4:	e8 07       	cpc	r30, r24
 2d6:	f9 07       	cpc	r31, r25
 2d8:	c0 f0       	brcs	.+48     	; 0x30a <__fp_cmp+0x46>
 2da:	12 16       	cp	r1, r18
 2dc:	13 06       	cpc	r1, r19
 2de:	e4 07       	cpc	r30, r20
 2e0:	f5 07       	cpc	r31, r21
 2e2:	98 f0       	brcs	.+38     	; 0x30a <__fp_cmp+0x46>
 2e4:	62 1b       	sub	r22, r18
 2e6:	73 0b       	sbc	r23, r19
 2e8:	84 0b       	sbc	r24, r20
 2ea:	95 0b       	sbc	r25, r21
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__fp_cmp+0x38>
 2ee:	0a 26       	eor	r0, r26
 2f0:	61 f0       	breq	.+24     	; 0x30a <__fp_cmp+0x46>
 2f2:	23 2b       	or	r18, r19
 2f4:	24 2b       	or	r18, r20
 2f6:	25 2b       	or	r18, r21
 2f8:	21 f4       	brne	.+8      	; 0x302 <__fp_cmp+0x3e>
 2fa:	08 95       	ret
 2fc:	0a 26       	eor	r0, r26
 2fe:	09 f4       	brne	.+2      	; 0x302 <__fp_cmp+0x3e>
 300:	a1 40       	sbci	r26, 0x01	; 1
 302:	a6 95       	lsr	r26
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	81 1d       	adc	r24, r1
 308:	81 1d       	adc	r24, r1
 30a:	08 95       	ret

0000030c <__mulsf3>:
 30c:	0e 94 99 01 	call	0x332	; 0x332 <__mulsf3x>
 310:	0c 94 0a 02 	jmp	0x414	; 0x414 <__fp_round>
 314:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__fp_pscA>
 318:	38 f0       	brcs	.+14     	; 0x328 <__mulsf3+0x1c>
 31a:	0e 94 03 02 	call	0x406	; 0x406 <__fp_pscB>
 31e:	20 f0       	brcs	.+8      	; 0x328 <__mulsf3+0x1c>
 320:	95 23       	and	r25, r21
 322:	11 f0       	breq	.+4      	; 0x328 <__mulsf3+0x1c>
 324:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_inf>
 328:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__fp_nan>
 32c:	11 24       	eor	r1, r1
 32e:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_szero>

00000332 <__mulsf3x>:
 332:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_split3>
 336:	70 f3       	brcs	.-36     	; 0x314 <__mulsf3+0x8>

00000338 <__mulsf3_pse>:
 338:	95 9f       	mul	r25, r21
 33a:	c1 f3       	breq	.-16     	; 0x32c <__mulsf3+0x20>
 33c:	95 0f       	add	r25, r21
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	55 1f       	adc	r21, r21
 342:	62 9f       	mul	r22, r18
 344:	f0 01       	movw	r30, r0
 346:	72 9f       	mul	r23, r18
 348:	bb 27       	eor	r27, r27
 34a:	f0 0d       	add	r31, r0
 34c:	b1 1d       	adc	r27, r1
 34e:	63 9f       	mul	r22, r19
 350:	aa 27       	eor	r26, r26
 352:	f0 0d       	add	r31, r0
 354:	b1 1d       	adc	r27, r1
 356:	aa 1f       	adc	r26, r26
 358:	64 9f       	mul	r22, r20
 35a:	66 27       	eor	r22, r22
 35c:	b0 0d       	add	r27, r0
 35e:	a1 1d       	adc	r26, r1
 360:	66 1f       	adc	r22, r22
 362:	82 9f       	mul	r24, r18
 364:	22 27       	eor	r18, r18
 366:	b0 0d       	add	r27, r0
 368:	a1 1d       	adc	r26, r1
 36a:	62 1f       	adc	r22, r18
 36c:	73 9f       	mul	r23, r19
 36e:	b0 0d       	add	r27, r0
 370:	a1 1d       	adc	r26, r1
 372:	62 1f       	adc	r22, r18
 374:	83 9f       	mul	r24, r19
 376:	a0 0d       	add	r26, r0
 378:	61 1d       	adc	r22, r1
 37a:	22 1f       	adc	r18, r18
 37c:	74 9f       	mul	r23, r20
 37e:	33 27       	eor	r19, r19
 380:	a0 0d       	add	r26, r0
 382:	61 1d       	adc	r22, r1
 384:	23 1f       	adc	r18, r19
 386:	84 9f       	mul	r24, r20
 388:	60 0d       	add	r22, r0
 38a:	21 1d       	adc	r18, r1
 38c:	82 2f       	mov	r24, r18
 38e:	76 2f       	mov	r23, r22
 390:	6a 2f       	mov	r22, r26
 392:	11 24       	eor	r1, r1
 394:	9f 57       	subi	r25, 0x7F	; 127
 396:	50 40       	sbci	r21, 0x00	; 0
 398:	9a f0       	brmi	.+38     	; 0x3c0 <__mulsf3_pse+0x88>
 39a:	f1 f0       	breq	.+60     	; 0x3d8 <__mulsf3_pse+0xa0>
 39c:	88 23       	and	r24, r24
 39e:	4a f0       	brmi	.+18     	; 0x3b2 <__mulsf3_pse+0x7a>
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	bb 1f       	adc	r27, r27
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	50 40       	sbci	r21, 0x00	; 0
 3b0:	a9 f7       	brne	.-22     	; 0x39c <__mulsf3_pse+0x64>
 3b2:	9e 3f       	cpi	r25, 0xFE	; 254
 3b4:	51 05       	cpc	r21, r1
 3b6:	80 f0       	brcs	.+32     	; 0x3d8 <__mulsf3_pse+0xa0>
 3b8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_inf>
 3bc:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_szero>
 3c0:	5f 3f       	cpi	r21, 0xFF	; 255
 3c2:	e4 f3       	brlt	.-8      	; 0x3bc <__mulsf3_pse+0x84>
 3c4:	98 3e       	cpi	r25, 0xE8	; 232
 3c6:	d4 f3       	brlt	.-12     	; 0x3bc <__mulsf3_pse+0x84>
 3c8:	86 95       	lsr	r24
 3ca:	77 95       	ror	r23
 3cc:	67 95       	ror	r22
 3ce:	b7 95       	ror	r27
 3d0:	f7 95       	ror	r31
 3d2:	e7 95       	ror	r30
 3d4:	9f 5f       	subi	r25, 0xFF	; 255
 3d6:	c1 f7       	brne	.-16     	; 0x3c8 <__mulsf3_pse+0x90>
 3d8:	fe 2b       	or	r31, r30
 3da:	88 0f       	add	r24, r24
 3dc:	91 1d       	adc	r25, r1
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__fp_inf>:
 3e6:	97 f9       	bld	r25, 7
 3e8:	9f 67       	ori	r25, 0x7F	; 127
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <__fp_nan>:
 3f2:	9f ef       	ldi	r25, 0xFF	; 255
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	08 95       	ret

000003f8 <__fp_pscA>:
 3f8:	00 24       	eor	r0, r0
 3fa:	0a 94       	dec	r0
 3fc:	16 16       	cp	r1, r22
 3fe:	17 06       	cpc	r1, r23
 400:	18 06       	cpc	r1, r24
 402:	09 06       	cpc	r0, r25
 404:	08 95       	ret

00000406 <__fp_pscB>:
 406:	00 24       	eor	r0, r0
 408:	0a 94       	dec	r0
 40a:	12 16       	cp	r1, r18
 40c:	13 06       	cpc	r1, r19
 40e:	14 06       	cpc	r1, r20
 410:	05 06       	cpc	r0, r21
 412:	08 95       	ret

00000414 <__fp_round>:
 414:	09 2e       	mov	r0, r25
 416:	03 94       	inc	r0
 418:	00 0c       	add	r0, r0
 41a:	11 f4       	brne	.+4      	; 0x420 <__fp_round+0xc>
 41c:	88 23       	and	r24, r24
 41e:	52 f0       	brmi	.+20     	; 0x434 <__fp_round+0x20>
 420:	bb 0f       	add	r27, r27
 422:	40 f4       	brcc	.+16     	; 0x434 <__fp_round+0x20>
 424:	bf 2b       	or	r27, r31
 426:	11 f4       	brne	.+4      	; 0x42c <__fp_round+0x18>
 428:	60 ff       	sbrs	r22, 0
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__fp_round+0x20>
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	8f 4f       	sbci	r24, 0xFF	; 255
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	08 95       	ret

00000436 <__fp_split3>:
 436:	57 fd       	sbrc	r21, 7
 438:	90 58       	subi	r25, 0x80	; 128
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	59 f0       	breq	.+22     	; 0x456 <__fp_splitA+0x10>
 440:	5f 3f       	cpi	r21, 0xFF	; 255
 442:	71 f0       	breq	.+28     	; 0x460 <__fp_splitA+0x1a>
 444:	47 95       	ror	r20

00000446 <__fp_splitA>:
 446:	88 0f       	add	r24, r24
 448:	97 fb       	bst	r25, 7
 44a:	99 1f       	adc	r25, r25
 44c:	61 f0       	breq	.+24     	; 0x466 <__fp_splitA+0x20>
 44e:	9f 3f       	cpi	r25, 0xFF	; 255
 450:	79 f0       	breq	.+30     	; 0x470 <__fp_splitA+0x2a>
 452:	87 95       	ror	r24
 454:	08 95       	ret
 456:	12 16       	cp	r1, r18
 458:	13 06       	cpc	r1, r19
 45a:	14 06       	cpc	r1, r20
 45c:	55 1f       	adc	r21, r21
 45e:	f2 cf       	rjmp	.-28     	; 0x444 <__fp_split3+0xe>
 460:	46 95       	lsr	r20
 462:	f1 df       	rcall	.-30     	; 0x446 <__fp_splitA>
 464:	08 c0       	rjmp	.+16     	; 0x476 <__fp_splitA+0x30>
 466:	16 16       	cp	r1, r22
 468:	17 06       	cpc	r1, r23
 46a:	18 06       	cpc	r1, r24
 46c:	99 1f       	adc	r25, r25
 46e:	f1 cf       	rjmp	.-30     	; 0x452 <__fp_splitA+0xc>
 470:	86 95       	lsr	r24
 472:	71 05       	cpc	r23, r1
 474:	61 05       	cpc	r22, r1
 476:	08 94       	sec
 478:	08 95       	ret

0000047a <__fp_zero>:
 47a:	e8 94       	clt

0000047c <__fp_szero>:
 47c:	bb 27       	eor	r27, r27
 47e:	66 27       	eor	r22, r22
 480:	77 27       	eor	r23, r23
 482:	cb 01       	movw	r24, r22
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
