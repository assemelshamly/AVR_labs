
WDT_lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087f  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000540  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e2  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bb  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  64:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:



void DIO_voidInit(void)
{
	DDRA=DIO_U8_PORTA_DIR;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB=DIO_U8_PORTB_DIR;
  6e:	17 ba       	out	0x17, r1	; 23
	DDRC=DIO_U8_PORTC_DIR;
  70:	14 ba       	out	0x14, r1	; 20
	DDRD=DIO_U8_PORTD_DIR;
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	81 bb       	out	0x11, r24	; 17
  76:	08 95       	ret

00000078 <DIO_voidSetPinValue>:
}

void DIO_voidSetPinValue(u8 Copy_u8Pin , u8 Copy_u8Value)
{
	if(Copy_u8Pin <= DIO_U8_PORTA_LAST_PIN)
  78:	88 30       	cpi	r24, 0x08	; 8
  7a:	00 f5       	brcc	.+64     	; 0xbc <DIO_voidSetPinValue+0x44>
	{
		switch(Copy_u8Value)
  7c:	66 23       	and	r22, r22
  7e:	81 f0       	breq	.+32     	; 0xa0 <DIO_voidSetPinValue+0x28>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	09 f0       	breq	.+2      	; 0x86 <DIO_voidSetPinValue+0xe>
  84:	81 c0       	rjmp	.+258    	; 0x188 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTA,Copy_u8Pin); break;
  86:	4b b3       	in	r20, 0x1b	; 27
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	b9 01       	movw	r22, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_voidSetPinValue+0x1c>
  90:	66 0f       	add	r22, r22
  92:	77 1f       	adc	r23, r23
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_voidSetPinValue+0x18>
  98:	cb 01       	movw	r24, r22
  9a:	84 2b       	or	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTA,Copy_u8Pin); break;
  a0:	4b b3       	in	r20, 0x1b	; 27
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_voidSetPinValue+0x36>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_voidSetPinValue+0x32>
  b2:	cb 01       	movw	r24, r22
  b4:	80 95       	com	r24
  b6:	84 23       	and	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
		}
	}
	else if(Copy_u8Pin <= DIO_U8_PORTB_LAST_PIN)
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	08 f5       	brcc	.+66     	; 0x102 <DIO_voidSetPinValue+0x8a>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTA_LAST_PIN + DIO_U8_PORT_OFFSET);
  c0:	88 50       	subi	r24, 0x08	; 8
		switch(Copy_u8Value)
  c2:	66 23       	and	r22, r22
  c4:	81 f0       	breq	.+32     	; 0xe6 <DIO_voidSetPinValue+0x6e>
  c6:	61 30       	cpi	r22, 0x01	; 1
  c8:	09 f0       	breq	.+2      	; 0xcc <DIO_voidSetPinValue+0x54>
  ca:	5e c0       	rjmp	.+188    	; 0x188 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTB,Copy_u8Pin); break;
  cc:	48 b3       	in	r20, 0x18	; 24
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_voidSetPinValue+0x62>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_voidSetPinValue+0x5e>
  de:	cb 01       	movw	r24, r22
  e0:	84 2b       	or	r24, r20
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTB,Copy_u8Pin); break;
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinValue+0x7c>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	8a 95       	dec	r24
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinValue+0x78>
  f8:	cb 01       	movw	r24, r22
  fa:	80 95       	com	r24
  fc:	84 23       	and	r24, r20
  fe:	88 bb       	out	0x18, r24	; 24
 100:	08 95       	ret
		}	
	}
	else if(Copy_u8Pin <= DIO_U8_PORTC_LAST_PIN)
 102:	88 31       	cpi	r24, 0x18	; 24
 104:	00 f5       	brcc	.+64     	; 0x146 <DIO_voidSetPinValue+0xce>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTB_LAST_PIN + DIO_U8_PORT_OFFSET);
 106:	80 51       	subi	r24, 0x10	; 16
		switch(Copy_u8Value)
 108:	66 23       	and	r22, r22
 10a:	79 f0       	breq	.+30     	; 0x12a <DIO_voidSetPinValue+0xb2>
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	e1 f5       	brne	.+120    	; 0x188 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTC,Copy_u8Pin); break;
 110:	45 b3       	in	r20, 0x15	; 21
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinValue+0xa6>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinValue+0xa2>
 122:	cb 01       	movw	r24, r22
 124:	84 2b       	or	r24, r20
 126:	85 bb       	out	0x15, r24	; 21
 128:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTC,Copy_u8Pin); break;
 12a:	45 b3       	in	r20, 0x15	; 21
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_voidSetPinValue+0xc0>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_voidSetPinValue+0xbc>
 13c:	cb 01       	movw	r24, r22
 13e:	80 95       	com	r24
 140:	84 23       	and	r24, r20
 142:	85 bb       	out	0x15, r24	; 21
 144:	08 95       	ret
		}			
	}
	else if(Copy_u8Pin <= DIO_U8_PORTD_LAST_PIN)
 146:	80 32       	cpi	r24, 0x20	; 32
 148:	f8 f4       	brcc	.+62     	; 0x188 <DIO_voidSetPinValue+0x110>
	{
		Copy_u8Pin = Copy_u8Pin - (DIO_U8_PORTC_LAST_PIN + DIO_U8_PORT_OFFSET);
 14a:	88 51       	subi	r24, 0x18	; 24
		switch(Copy_u8Value)
 14c:	66 23       	and	r22, r22
 14e:	79 f0       	breq	.+30     	; 0x16e <DIO_voidSetPinValue+0xf6>
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	d1 f4       	brne	.+52     	; 0x188 <DIO_voidSetPinValue+0x110>
		{
		   case DIO_U8_HIGH: SET_BIT(PORTD,Copy_u8Pin); break;
 154:	42 b3       	in	r20, 0x12	; 18
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_voidSetPinValue+0xea>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	8a 95       	dec	r24
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_voidSetPinValue+0xe6>
 166:	cb 01       	movw	r24, r22
 168:	84 2b       	or	r24, r20
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	08 95       	ret
		   case DIO_U8_LOW: CLEAR_BIT(PORTD,Copy_u8Pin); break;
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinValue+0x104>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinValue+0x100>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	82 bb       	out	0x12, r24	; 18
 188:	08 95       	ret

0000018a <main>:
#include "DIO_int.h"
#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
    DIO_voidInit();
 18a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	DIO_voidSetPinValue(DIO_U8_PIN27,DIO_U8_LOW);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b e1       	ldi	r24, 0x1B	; 27
 192:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	83 ed       	ldi	r24, 0xD3	; 211
 19a:	90 e3       	ldi	r25, 0x30	; 48
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x12>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x1c>
 1a6:	00 00       	nop
	_delay_ms(1000);
	DIO_voidSetPinValue(DIO_U8_PIN27,DIO_U8_HIGH);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	8b e1       	ldi	r24, 0x1B	; 27
 1ac:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_voidSetPinValue>
	WDT_voidSetTimeout(6);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WDT_voidSetTimeout>
	WDT_voidEnable();
 1b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <WDT_voidEnable>
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <main+0x30>

000001bc <WDT_voidEnable>:
void WDT_voidDisable(void)
{
	/* Write logical one to WDTOE and WDE */
    WDTCR = (1<<WDE) | (1<<WDTOE);
    /* Turn off WDT */
    WDTCR = 0x00;
 1bc:	81 b5       	in	r24, 0x21	; 33
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	81 bd       	out	0x21, r24	; 33
 1c2:	08 95       	ret

000001c4 <WDT_voidSetTimeout>:
}
void WDT_voidSetTimeout(u8 Copy_u8Time)
{
	
	if(Copy_u8Time == WDT_U8_16_3_ms)
 1c4:	81 11       	cpse	r24, r1
 1c6:	0a c0       	rjmp	.+20     	; 0x1dc <WDT_voidSetTimeout+0x18>
	{
		CLEAR_BIT(WDTCR,0);
 1c8:	81 b5       	in	r24, 0x21	; 33
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,1);
 1ce:	81 b5       	in	r24, 0x21	; 33
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,2);
 1d4:	81 b5       	in	r24, 0x21	; 33
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	81 bd       	out	0x21, r24	; 33
 1da:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_32_5_ms)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	51 f4       	brne	.+20     	; 0x1f4 <WDT_voidSetTimeout+0x30>
	{
		CLEAR_BIT(WDTCR,0);
 1e0:	81 b5       	in	r24, 0x21	; 33
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,1);
 1e6:	81 b5       	in	r24, 0x21	; 33
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,2);
 1ec:	81 b5       	in	r24, 0x21	; 33
 1ee:	84 60       	ori	r24, 0x04	; 4
 1f0:	81 bd       	out	0x21, r24	; 33
 1f2:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_65_ms)
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	51 f4       	brne	.+20     	; 0x20c <WDT_voidSetTimeout+0x48>
	{
		CLEAR_BIT(WDTCR,0);
 1f8:	81 b5       	in	r24, 0x21	; 33
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,1);
 1fe:	81 b5       	in	r24, 0x21	; 33
 200:	82 60       	ori	r24, 0x02	; 2
 202:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,2);
 204:	81 b5       	in	r24, 0x21	; 33
 206:	8b 7f       	andi	r24, 0xFB	; 251
 208:	81 bd       	out	0x21, r24	; 33
 20a:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_0_13_s)
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	51 f4       	brne	.+20     	; 0x224 <WDT_voidSetTimeout+0x60>
	{
		CLEAR_BIT(WDTCR,0);
 210:	81 b5       	in	r24, 0x21	; 33
 212:	8e 7f       	andi	r24, 0xFE	; 254
 214:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,1);
 216:	81 b5       	in	r24, 0x21	; 33
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,2);
 21c:	81 b5       	in	r24, 0x21	; 33
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	81 bd       	out	0x21, r24	; 33
 222:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_0_26_s)
 224:	84 30       	cpi	r24, 0x04	; 4
 226:	51 f4       	brne	.+20     	; 0x23c <WDT_voidSetTimeout+0x78>
	{
		SET_BIT(WDTCR,0);
 228:	81 b5       	in	r24, 0x21	; 33
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,1);
 22e:	81 b5       	in	r24, 0x21	; 33
 230:	8d 7f       	andi	r24, 0xFD	; 253
 232:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,2);
 234:	81 b5       	in	r24, 0x21	; 33
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	81 bd       	out	0x21, r24	; 33
 23a:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_0_52_s)
 23c:	85 30       	cpi	r24, 0x05	; 5
 23e:	51 f4       	brne	.+20     	; 0x254 <WDT_voidSetTimeout+0x90>
	{
		SET_BIT(WDTCR,0);
 240:	81 b5       	in	r24, 0x21	; 33
 242:	81 60       	ori	r24, 0x01	; 1
 244:	81 bd       	out	0x21, r24	; 33
	    CLEAR_BIT(WDTCR,1);
 246:	81 b5       	in	r24, 0x21	; 33
 248:	8d 7f       	andi	r24, 0xFD	; 253
 24a:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,2);
 24c:	81 b5       	in	r24, 0x21	; 33
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	81 bd       	out	0x21, r24	; 33
 252:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_1_s)
 254:	86 30       	cpi	r24, 0x06	; 6
 256:	51 f4       	brne	.+20     	; 0x26c <WDT_voidSetTimeout+0xa8>
	{
		CLEAR_BIT(WDTCR,0);
 258:	81 b5       	in	r24, 0x21	; 33
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,1);
 25e:	81 b5       	in	r24, 0x21	; 33
 260:	82 60       	ori	r24, 0x02	; 2
 262:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,2);
 264:	81 b5       	in	r24, 0x21	; 33
 266:	84 60       	ori	r24, 0x04	; 4
 268:	81 bd       	out	0x21, r24	; 33
 26a:	08 95       	ret
	}
	else if(Copy_u8Time == WDT_U8_2_1_s)
 26c:	87 30       	cpi	r24, 0x07	; 7
 26e:	49 f4       	brne	.+18     	; 0x282 <WDT_voidSetTimeout+0xbe>
	{
		SET_BIT(WDTCR,0);
 270:	81 b5       	in	r24, 0x21	; 33
 272:	81 60       	ori	r24, 0x01	; 1
 274:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,1);
 276:	81 b5       	in	r24, 0x21	; 33
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	81 bd       	out	0x21, r24	; 33
	    SET_BIT(WDTCR,2);
 27c:	81 b5       	in	r24, 0x21	; 33
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	81 bd       	out	0x21, r24	; 33
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
